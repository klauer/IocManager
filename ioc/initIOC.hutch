BASEPORT=39050
PROCMGRD_ROOT=procmgrd

if [ -z "$IOC_DATA" ]; then
	IOC_DATA=/reg/d/iocData
fi
host=`hostname -s`
PROCMGRD_LOG_DIR=$IOC_DATA/$host/logs

# Figure out the hutch configuration: fee, amo, sxr, xpp, ...
cfg=`awk /$host/'{print $2;}'  $PYPS_ROOT/config/hosts.special`
if [ "${cfg}X" == "X" ]; then
    cfg=`echo $host | awk '{print substr($0,5,3);}' -`
fi

cfguser=${cfg}ioc
if [ "$cfg" == "xrt" ]; then
    cfguser=feeioc
fi

# Setup the cfg environment.
export IOC=${host}
export IOC_USER=${cfguser}
source $IOC_COMMON/All/${cfg}_env.sh

# Find the procmgrd bin directory via ${cfg}_env PROCSERV variable
PROCSERV_WORDS=($PROCSERV)
PROCSERV_EXE=${PROCSERV_WORDS[0]}
PROCMGRD_DIR=$(dirname $PROCSERV_EXE)

# Make sure we have a procmgrd log directory
if [ ! -d $PROCMGRD_LOG_DIR ]; then
	su $cfguser -s /bin/sh -c "mkdir -p  $PROCMGRD_LOG_DIR"
fi
su $cfguser -s /bin/sh -c "chmod g+rwx $PROCMGRD_LOG_DIR"

# Allow control connections from anywhere
# ignore ^D so procmgrd doesn't terminate on ^D
# No max on coresize
# Start child processes from /tmp
PROCMGRD_ARGS="--allow --ignore '^D' --coresize 0 -c /tmp"

# Disable readline and filename expansion
PROCMGRD_SHELL="/bin/sh --noediting -f"

launchProcMgrD()
{
	cfgduser=$1
    PROCMGRD_BIN=$PROCMGRD_DIR/$2
    ctrlport=$3
    logport=$(( ctrlport + 1 ))
	PROCMGRD_LOGFILE=$PROCMGRD_LOG_DIR/$2.log
    su ${cfgduser} -s /bin/sh -c "$PROCMGRD_BIN $PROCMGRD_ARGS -l $logport --logfile $PROCMGRD_LOGFILE $ctrlport $PROCMGRD_SHELL"
    fixTelnet $ctrlport
}

# Start up the procmgrd for the hutch cfguser.
if [ "$cfg" != "xrt" -a "$cfg" != "las" ]; then
	launchProcMgrD $cfguser ${PROCMGRD_ROOT}0 $(( BASEPORT ))
fi

# Start up the procmgrd for feeioc
launchProcMgrD feeioc ${PROCMGRD_ROOT}1 $(( BASEPORT + 2 ))

# Start up the procmgrd for lasioc
launchProcMgrD lasioc ${PROCMGRD_ROOT}2 $(( BASEPORT + 4 ))

# Driver stuff.
# TODO: Remove reliance on iocmanager for driver initialization
# Should be handled in a generic way by a common host startup script w/
# optional override of default driver versions via host specific files.

if [ -x /sbin/service ]; then
        /sbin/service hyperthreading-disable start
fi

if [ ! -e /dev/era0 -a -e $IOC_ROOT/../modules/event2/latest/driver/evr_load_module ]; then
        # Load EVR module on startup
        # Must be run as root
        $IOC_ROOT/../modules/ev2_driver/latest/driver/evr_load_module
	if [ ! -e /dev/era0 ]
        then
	    /sbin/rmmod evr_device
        fi
	if [ ! -e /dev/ega0 ]
        then
	    /sbin/rmmod pci_mrfevg
        fi
fi

if [ ! -e /dev/edt0 -a -e /opt/EDTpdv/edtinit ]; then
        # Install EDT driver on startup
        # Must be run as root
        /opt/EDTpdv/edtinit start
fi

# Add any extra driver initialization before this comment.

# Setup the IOC user environment.
export IOC=$host

# Start caRepeater.
su ${cfguser} -s /bin/sh -c "$PROCSERV --logfile $IOC_DATA/$IOC_HOST/iocInfo/caRepeater.log --name caRepeater 30000 $CA_BIN/caRepeater"
sleep 5

# Start all of our processes.
if [ "$cfg" != "xrt" -a "$cfg" != "las" ]; then
    startAll $cfg $host
fi
startAll xrt $host
startAll las $host
